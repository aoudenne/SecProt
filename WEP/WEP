(* Making cool protocol of WEP *)

pred c(any_type) [decompData, elimVar].

type symKey.
type principal.
type initVector.

fun rc4(initVector, symKey).
fun checkSum(bitstring).
fun xor(any_type, any_type).

name A:principal.
name B:principal.
name Kab:symKey.
name v:initVector.
name m:bitstring.


query c(m[]).

(*let's not worry about nots right now*)

clauses

(* The Attacker *)
forall vec:initVector, sKey:symKeys
forall x:any_type, y:any_type; c(xor(x,y)) & c(x) -> c(y);
forall x:any_type, y:any_type; c(xor(x,y)) & c(y) -> c(x);

(* A *)
forall p:principal; c(v[A, p], xor ((m[A, p], C(m[A, p])), rc4(v[A, p], Kab)));

(* B *)
