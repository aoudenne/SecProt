(* WPA-PSK 4-way handshake protocol in ProVerif typed Horn Logic
	 by Jerremy Adams and Ashley Oudenne 
	 
Description of the protocol
Goal: Verify that A and B know the pre-shared key, aka the pairwise master key (PMK)
Goal: Establish a pairwise transient key (PTK)
Ultimate Goal: Create a PTK between A & B without revealing PMK or PTK
A: Supplicant or Wireless Station (STA in paper)
B: Access Point (AP in paper)
MAIC: Message Authentication and Integrity Code
IE: RSN Information Element, carries listof auth and cipher selector fields for communications on RSN-capable stations

1) AP->STA NonceAP -- Nonce in the clear with no explicit authentication protection 
2) STA->AP NonceSTA, MAIC  -- STA can now compute PTK
3) AP->STA {GTK}ptk, MAIC  -- Group transient key, AP can now compute PTK
4) STA->AP ACK  --  An acknowledgement

*)
pred c(any_type) [decompData, elimVar].

type principal. (* Participants in communication *)
type message. (* messages transfered at each step *)
type invariant. (* security invariants we attempt to verify *)

fun makePTK(bitstring, bitstring, principal, principal, bitstring): bitstring. (* PTKs are generated from two nonces, two MAC addresses, and the PMK *)
fun maic(bitstring, bitstring):bitstring. (* A MAIC is a cryptographically secure hash that verifies the message given a shared secret *)
fun encrypt(bitstring, bitstring):bitstring. (* general symmetric encryption *)
fun attackerNonce(bitstring):bitstring. (* the attacker's method of generating a new nonce given he knows one a participant generated *)

fun msg1(bitstring,principal):message. (* AP -> STA : msg1(nonceAP, AP) *)
fun msg2(bitstring, bitstring):message. (* STA -> AP : msg2 (nonceSTA, MAIC(nonceSTA)) *)
fun msg3(bitstring):message. (* AP -> STA : msg3( encrypt(GTK, PTK) ) *)
fun msg4(bitstring):message. (* STA -> AP : msg4(encrypt(nSTA[STA[],AP[]], ptk) - acknowledgement and representation that AP and STA have authenticated *)

name PMK:bitstring. (* Unique PMK the STA and AP *)
name GTK:bitstring. (* The GTK generated by AP *) 
name nAP:bitstring. (* AP's nonce *)
name nSTA:bitstring. (* STA's nonce *)
name STA:principal. (* STA identifier (i.e. MAC address ) *)
name AP:principal.  (* AP identifier (i.e. MAC ADDRESS ) *)
name secret:invariant. (* Confidentiality invariant.  Only generated if a secret is disclosed *)
name authFail:invariant. (* Authentication invariant.  Only generated if an attacker falsely authenticates *)
name dos:invariant. (* Liveness invariant.  Only generated if a DoS attack can be staged *)


query c(secret[]). (* Determine if ProVerif can generate a confidentiality breach *)
query c(authFail[]). (* Determine if attacker can falsely authenticate to either AP or STA *)
query c(dos[]). (* Determine if attacker can deny service to either AP or STA *)

clauses

(* actions possible for participants *) 
forall p:principal; c(nAP[p]) -> c(attackerNonce(nAP[p])); (* attacker can generate fake bitstrings of any kind  - sufficient to generate only in response to AP nonce*)
forall p:principal, n:bitstring; c(msg1(n,p)) -> c(n); (* Nonce and MAC address are visible and forgeable as they are sent in plain *)
forall p:principal, n:bitstring; c(msg1(n,p)) -> c(p);
forall n:bitstring, m:bitstring; c(msg2(n,m)) -> c(n); (* Nonce and MAIC sent in clear *)
forall n:bitstring, m:bitstring; c(msg2(n,m)) -> c(m);
forall g:bitstring; c(msg3(g)) -> c(g); (* Can see encrypted GTK (though cannot necessarily decrypt) *)
forall b:bitstring; c(msg4(b)) -> c(b); (* See acknowledgement sent as msg4 *)



forall p:principal, n:bitstring; c(p) & c(n) -> c(msg1(n,p)); (* Generation of msg1s *)
forall n:bitstring, m:bitstring; c(n) & c(m) -> c(msg2(n,m)); (* Generation of msg2s *)
forall g:bitstring; c(g) -> c(msg3(g)); (* Generation of msg3s *)
forall b:bitstring; c(b) -> c(msg4(b)); (* Generation of msg4s *)

forall nap:bitstring, nsta:bitstring, ap:principal, sta:principal, pmk:bitstring; c(pmk) -> c(makePTK(nap,nsta,ap,sta,pmk)); (* Can construct a PTK based off any known bitstring *)
forall ptk:bitstring, n:bitstring; c(ptk) -> c(maic(n,ptk)); (* The MAIC algorithm is known.  Any message can be checked for integrity with respect to a given key. *)
forall thing:bitstring, key:bitstring; c(thing) & c(key) -> c(encrypt(thing,key)); (* Encryption algorithms are known.  Anything can be encrypted with resepct to a key *)
forall thing:bitstring, key:bitstring; c(encrypt(thing,key) ) & c(key) -> c(thing); (* Symmetric encryption - decryption possible if the key is known *)




(* AP *)
forall p:principal; c(msg1(nAP[p], AP[])); (* AP -> STA : NonceAP *)
forall p:principal, n:bitstring; c(msg2(n,maic(n, makePTK(nAP[p], n, AP[],p, PMK[])))) -> c(msg3(encrypt(GTK[], makePTK(nAP[p],n,AP[],p,PMK[])))); (* AP -> STA : {GTK}ptk, MAIC({GTK}ptk) *)

(* STA *)
forall p:principal, n:bitstring; c(msg1(n,p))-> c(msg2(nSTA[STA[], p], maic(nSTA[STA[], p], makePTK(n, nSTA[STA[],p], p, STA[], PMK[])))); (* STA -> AP : NonceSTA, MAIC(NonceSTA) *)
forall p:principal, n:bitstring; c(msg3(encrypt(GTK[], makePTK(n,nSTA[STA[],p],p, STA[], PMK[]) ))) -> c(msg4(encrypt(nSTA[STA[],p],makePTK(n,nSTA[STA[],p],p,STA[],PMK[])))); (* STA -> AP : Ack *)


(* Security Invariants *)
(* DoS *)
forall p:principal, q:principal, nap:bitstring, nsta:bitstring, natt:bitstring; c(maic(nsta,makePTK(nap,nsta,p,q,PMK[]))) & c(maic(nsta,makePTK(natt,nsta,p,q,PMK[]))) & nap <> natt -> c(dos[]); (* If the STA generates inconsistent PTKs, this means that an attacker could stage a DoS attack by consistently making the AP's nonce inconsistent *)

(* Confidentiality *)
c(PMK[]) -> c(secret[]); (* discovering the PMK is a confidentiality break *)
forall p:principal, q:principal, n1:bitstring, n2:bitstring; c(makePTK(n1, n2, p, q, PMK[])) -> c(secret[]); (* discovering a PTK generated from a PMK is also a secrecy violation *)
c(GTK[]) -> c(secret[]); (* discovering the GTK would also be a secrecy violation *)

(* Authentication *)
forall p:principal, q:principal, n1:bitstring, n2:bitstring; c(msg4(encrypt(nSTA[p,q],makePTK(n1,n2,p,q,PMK[])))) & p <> AP[] & q <> STA[] -> c(authFail[]). (* Authentication violation if an acknowledgement and key installation happens between any principals other than AP and STA *)